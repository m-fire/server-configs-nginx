# Configuration File - Nginx Server Configs
# https://nginx.org/en/docs/

# 보안상의 이유로 권한이 낮은 고유 사용자로 실행합니다.
# Default: nobody nobody
user www-data;

# 최상의 성능을 위해 작업자 스레드를 시스템에서 사용 가능한 CPU 코어 수로 설정합니다.
# Should be > the number of CPU cores.
# 최대 연결 수 = worker_processes * worker_connections
# Default: 1
worker_processes auto;

# 작업자 프로세스당 최대 열려 있는 파일 수입니다.
# Should be > worker_connections.
# Default: no limit
worker_rlimit_nofile 8192;

# 연결 처리에 영향을 주는 지시어가 지정되는 구성 파일 컨텍스트를 제공합니다.
events {

  # 이보다 더 많은 연결이 필요하면 OS 최적화를 시작해야 합니다.
  # 이 정도 요청이 많으면 아마도 여러분보다 더 똑똑한 사람을 고용하는 시점이 될 것입니다.
  # Should be < worker_rlimit_nofile.
  # Default: 512
  worker_connections 8000;

}

# 이 파일에 오류 및 경고 기록 '서버' 수준에서 재정의하지 않는 경우에만 사용됩니다.
# Default: logs/error.log error
error_log /var/log/nginx/error.log warn;

# 메인 프로세스의 프로세스 ID를 저장하는 파일
# Default: logs/nginx.pid
# https://nginx.org/en/docs/ngx_core_module.html#pid
pid /var/run/nginx.pid;

# custom.d 폴더에 파일을 포함합니다. 사용자 지정 구성 파일은 `custom.d` 폴더에
# 넣어야 합니다. 구성 비활성화는 파일 앞에 점을 붙여서 합니다.
include custom.d/*.conf;

http {

  # Nginx 버전 정보를 숨깁니다.
  include h5bp/security/server_software_information.conf;

  # 파일에 대한 미디어(MIME) 유형을 지정합니다.
  include h5bp/media_types/media_types.conf;

  # 문자 인코딩을 설정합니다.
  include h5bp/media_types/character_encodings.conf;

  # 로그 파일에 사용되는 기본 형식에 $http_x_forwarded_for를 포함합니다.
  # https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  # 이 파일에 대한 접근을 기록합니다. 즉 '서버' 수준에서 재정의하지 않는 경우에만 사용됩니다.
  # Default: logs/access.log combined
  access_log /var/log/nginx/access.log main;

  # 각 연결의 유휴상태 허용시간.
  # 값이 클수록 각 개별 클라이언트, 특히 SSL의 경우 더 좋지만,
  # 이는 작업자 연결이 더 오래 묶여 있다는 의미입니다.
  # Default: 75s
  keepalive_timeout 20s;

  # `read()`/`write()` 대신 `sendfile()`로 descriptor 간 직접복사를 통해 파일 전송
  # 속도를 높힐 수 있음.
  # 성능상의 이유로, ZFS가 설치된 FreeBSD 시스템에서는 이 옵션을 비활성화해야 하는데,
  # 이는 ZFS의 ARC가 기본적으로 자주 사용하는 파일을 RAM에 캐시하기 때문.
  # Default: off
  sendfile on;

  # partial frame 을 보내지 마십시오.
  # off 옵션은 TCP 프레임이 전송되기 전에 채워지므로 처리량이 증가합니다.
  # Default: off
  tcp_nopush on;

  # gzip 압축을 활성화합니다.
  include h5bp/web_performance/compression.conf;

  # 파일 캐시 만료를 지정합니다. Specify file cache expiration.
  include h5bp/web_performance/cache_expiration.conf;

  # Add Cache-Control.
  # h5bp/web_performance/cache-control.conf
  map $sent_http_content_type $cache_control {
    default                           "public, immutable, stale-while-revalidate";

    # No content
    ""                                "no-store";

    # Manifest files
    ~*application/manifest\+json      "public";
    ~*text/cache-manifest             ""; # `no-cache` (*)

    # Assets
    ~*image/svg\+xml                  "public, immutable, stale-while-revalidate";

    # Data interchange
    ~*application/(atom|rdf|rss)\+xml "public, stale-while-revalidate";

    # Documents
    ~*text/html                       "private, must-revalidate";
    ~*text/markdown                   "private, must-revalidate";
    ~*text/calendar                   "private, must-revalidate";

    # Data
    ~*json                            ""; # `no-cache` (*)
    ~*xml                             ""; # `no-cache` (*)
  }

  # Add X-Frame-Options for HTML documents.
  # 외부참조 태그(iframe, object, embeded 등)사용 시 랜더링 가능/불가능 설정.
  # h5bp/security/x-frame-options.conf
  map $sent_http_content_type $x_frame_options {
    ~*text/html DENY;
  }

  # Add Content-Security-Policy for HTML documents.
  # XSS, Data Injection, Click Jacking 등 웹 페이지에 악성 스크립트 주입공격 방지 설정.
  # h5bp/security/content-security-policy.conf
  map $sent_http_content_type $content_security_policy {
    ~*text/(html|javascript)|application/pdf|xml "default-src 'self'; base-uri 'none'; form-action 'self'; frame-ancestors 'none'; object-src 'none'; upgrade-insecure-requests";
  }

  # Add Permissions-Policy for HTML documents.
  # 다양한 브라우저 기능 및 API의 사용을 선택적으로 활성화 및 비활성화 하는 정책 설정.
  # h5bp/security/permissions-policy.conf
  map $sent_http_content_type $permissions_policy {
    ~*text/(html|javascript)|application/pdf|xml "accelerometer=(),autoplay=(),browsing-topics=(),camera=(),display-capture=(),document-domain=(),encrypted-media=(),fullscreen=(),geolocation=(),gyroscope=(),magnetometer=(),microphone=(),midi=(),payment=(),picture-in-picture=(),publickey-credentials-get=(),screen-wake-lock=(),sync-xhr=(self),usb=(),web-share=(),xr-spatial-tracking=()";
  }

  # Add Referrer-Policy for HTML documents.
  # 직전에 방문한 URL 을 흔적으로 남기는 기능의 정책 설정.
  # h5bp/security/referrer-policy.conf
  map $sent_http_content_type $referrer_policy {
    ~*text/(css|html|javascript)|application\/pdf|xml "strict-origin-when-cross-origin";
  }

  # Add Cross-Origin-Policies for HTML documents. "교차 출처 리소스 공유 정책" 설정.
  # 즉, 이전에 획득한 다른 주소의 자원접근 허용권한 으로, 주소가 다른 연관된 자원접근을 허용함.
  # h5bp/security/cross-origin-policy.conf
  # Cross-Origin-Embedder-Policy
  map $sent_http_content_type $coep_policy {
    ~*text/(html|javascript)|application/pdf|xml "require-corp";
  }
  # Cross-Origin-Opener-Policy
  map $sent_http_content_type $coop_policy {
    ~*text/(html|javascript)|application/pdf|xml "same-origin";
  }
  # Cross-Origin-Resource-Policy
  map $sent_http_content_type $corp_policy {
    ~*text/(html|javascript)|application/pdf|xml "same-origin";
  }

  # Add Access-Control-Allow-Origin.
  # 클라이언트의 자원접근 허용기준이 되는 리소스 URL 을 담은 Header.
  # 서버는 이것을 통해 클라이언트의 자원접근 여부를 결정함.
  # h5bp/cross-origin/requests.conf
  map $sent_http_content_type $cors {
    # Images
    ~*image/                        "*";

    # Web fonts
    ~*font/                         "*";
    ~*application/vnd.ms-fontobject "*";
    ~*application/x-font-ttf        "*";
    ~*application/font-woff         "*";
    ~*application/x-font-woff       "*";
    ~*application/font-woff2        "*";
  }

  # conf.d 폴더에 파일을 포함합니다. 'server' 구성 파일은 conf.d 폴더에 배치해야 합니다.
  # 파일 앞에 점을 붙여 구성을 비활성화해야 합니다.
  include conf.d/*.conf;

}
